// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	C++ class header boilerplate exported from UnrealHeaderTool.
	This is automatically generated by the tools.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

PRAGMA_DISABLE_DEPRECATION_WARNINGS
class UTextureRenderTarget2D;
struct FVector;
struct FRotator;
#ifdef STEAMVR_SteamVRFunctionLibrary_generated_h
#error "SteamVRFunctionLibrary.generated.h already included, missing '#pragma once' in SteamVRFunctionLibrary.h"
#endif
#define STEAMVR_SteamVRFunctionLibrary_generated_h

#define Engine_Plugins_Runtime_Steam_SteamVR_Source_SteamVR_Classes_SteamVRFunctionLibrary_h_30_RPC_WRAPPERS \
 \
	DECLARE_FUNCTION(execRemoveCaptureRenderTarget) \
	{ \
		P_GET_OBJECT(UTextureRenderTarget2D,Z_Param_NewTexture); \
		P_GET_OBJECT(UTextureRenderTarget2D,Z_Param_NewTexture2); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		USteamVRFunctionLibrary::RemoveCaptureRenderTarget(Z_Param_NewTexture,Z_Param_NewTexture2); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execSetCaptureRenderTarget) \
	{ \
		P_GET_OBJECT(UTextureRenderTarget2D,Z_Param_NewTexture); \
		P_GET_OBJECT(UTextureRenderTarget2D,Z_Param_NewTexture2); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		USteamVRFunctionLibrary::SetCaptureRenderTarget(Z_Param_NewTexture,Z_Param_NewTexture2); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execGetHandPositionAndOrientation) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_ControllerIndex); \
		P_GET_PROPERTY(UByteProperty,Z_Param_Hand); \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_OutPosition); \
		P_GET_STRUCT_REF(FRotator,Z_Param_Out_OutOrientation); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=USteamVRFunctionLibrary::GetHandPositionAndOrientation(Z_Param_ControllerIndex,EControllerHand(Z_Param_Hand),Z_Param_Out_OutPosition,Z_Param_Out_OutOrientation); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execGetTrackedDevicePositionAndOrientation) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_DeviceId); \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_OutPosition); \
		P_GET_STRUCT_REF(FRotator,Z_Param_Out_OutOrientation); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=USteamVRFunctionLibrary::GetTrackedDevicePositionAndOrientation(Z_Param_DeviceId,Z_Param_Out_OutPosition,Z_Param_Out_OutOrientation); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execGetValidTrackedDeviceIds) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_DeviceType); \
		P_GET_TARRAY_REF(int32,Z_Param_Out_OutTrackedDeviceIds); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		USteamVRFunctionLibrary::GetValidTrackedDeviceIds(ESteamVRTrackedDeviceType(Z_Param_DeviceType),Z_Param_Out_OutTrackedDeviceIds); \
		P_NATIVE_END; \
	}


#define Engine_Plugins_Runtime_Steam_SteamVR_Source_SteamVR_Classes_SteamVRFunctionLibrary_h_30_RPC_WRAPPERS_NO_PURE_DECLS \
 \
	DECLARE_FUNCTION(execRemoveCaptureRenderTarget) \
	{ \
		P_GET_OBJECT(UTextureRenderTarget2D,Z_Param_NewTexture); \
		P_GET_OBJECT(UTextureRenderTarget2D,Z_Param_NewTexture2); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		USteamVRFunctionLibrary::RemoveCaptureRenderTarget(Z_Param_NewTexture,Z_Param_NewTexture2); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execSetCaptureRenderTarget) \
	{ \
		P_GET_OBJECT(UTextureRenderTarget2D,Z_Param_NewTexture); \
		P_GET_OBJECT(UTextureRenderTarget2D,Z_Param_NewTexture2); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		USteamVRFunctionLibrary::SetCaptureRenderTarget(Z_Param_NewTexture,Z_Param_NewTexture2); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execGetHandPositionAndOrientation) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_ControllerIndex); \
		P_GET_PROPERTY(UByteProperty,Z_Param_Hand); \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_OutPosition); \
		P_GET_STRUCT_REF(FRotator,Z_Param_Out_OutOrientation); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=USteamVRFunctionLibrary::GetHandPositionAndOrientation(Z_Param_ControllerIndex,EControllerHand(Z_Param_Hand),Z_Param_Out_OutPosition,Z_Param_Out_OutOrientation); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execGetTrackedDevicePositionAndOrientation) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_DeviceId); \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_OutPosition); \
		P_GET_STRUCT_REF(FRotator,Z_Param_Out_OutOrientation); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=USteamVRFunctionLibrary::GetTrackedDevicePositionAndOrientation(Z_Param_DeviceId,Z_Param_Out_OutPosition,Z_Param_Out_OutOrientation); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execGetValidTrackedDeviceIds) \
	{ \
		P_GET_PROPERTY(UByteProperty,Z_Param_DeviceType); \
		P_GET_TARRAY_REF(int32,Z_Param_Out_OutTrackedDeviceIds); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		USteamVRFunctionLibrary::GetValidTrackedDeviceIds(ESteamVRTrackedDeviceType(Z_Param_DeviceType),Z_Param_Out_OutTrackedDeviceIds); \
		P_NATIVE_END; \
	}


#define Engine_Plugins_Runtime_Steam_SteamVR_Source_SteamVR_Classes_SteamVRFunctionLibrary_h_30_INCLASS_NO_PURE_DECLS \
	private: \
	static void StaticRegisterNativesUSteamVRFunctionLibrary(); \
	friend STEAMVR_API class UClass* Z_Construct_UClass_USteamVRFunctionLibrary(); \
	public: \
	DECLARE_CLASS(USteamVRFunctionLibrary, UBlueprintFunctionLibrary, COMPILED_IN_FLAGS(0), 0, TEXT("/Script/SteamVR"), NO_API) \
	DECLARE_SERIALIZER(USteamVRFunctionLibrary) \
	/** Indicates whether the class is compiled into the engine */ \
	enum {IsIntrinsic=COMPILED_IN_INTRINSIC};


#define Engine_Plugins_Runtime_Steam_SteamVR_Source_SteamVR_Classes_SteamVRFunctionLibrary_h_30_INCLASS \
	private: \
	static void StaticRegisterNativesUSteamVRFunctionLibrary(); \
	friend STEAMVR_API class UClass* Z_Construct_UClass_USteamVRFunctionLibrary(); \
	public: \
	DECLARE_CLASS(USteamVRFunctionLibrary, UBlueprintFunctionLibrary, COMPILED_IN_FLAGS(0), 0, TEXT("/Script/SteamVR"), NO_API) \
	DECLARE_SERIALIZER(USteamVRFunctionLibrary) \
	/** Indicates whether the class is compiled into the engine */ \
	enum {IsIntrinsic=COMPILED_IN_INTRINSIC};


#define Engine_Plugins_Runtime_Steam_SteamVR_Source_SteamVR_Classes_SteamVRFunctionLibrary_h_30_STANDARD_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API USteamVRFunctionLibrary(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(USteamVRFunctionLibrary) \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, USteamVRFunctionLibrary); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(USteamVRFunctionLibrary); \
private: \
	/** Private move- and copy-constructors, should never be used */ \
	NO_API USteamVRFunctionLibrary(USteamVRFunctionLibrary&&); \
	NO_API USteamVRFunctionLibrary(const USteamVRFunctionLibrary&); \
public:


#define Engine_Plugins_Runtime_Steam_SteamVR_Source_SteamVR_Classes_SteamVRFunctionLibrary_h_30_ENHANCED_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API USteamVRFunctionLibrary(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()) : Super(ObjectInitializer) { }; \
private: \
	/** Private move- and copy-constructors, should never be used */ \
	NO_API USteamVRFunctionLibrary(USteamVRFunctionLibrary&&); \
	NO_API USteamVRFunctionLibrary(const USteamVRFunctionLibrary&); \
public: \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, USteamVRFunctionLibrary); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(USteamVRFunctionLibrary); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(USteamVRFunctionLibrary)


#define Engine_Plugins_Runtime_Steam_SteamVR_Source_SteamVR_Classes_SteamVRFunctionLibrary_h_30_PRIVATE_PROPERTY_OFFSET
#define Engine_Plugins_Runtime_Steam_SteamVR_Source_SteamVR_Classes_SteamVRFunctionLibrary_h_27_PROLOG
#define Engine_Plugins_Runtime_Steam_SteamVR_Source_SteamVR_Classes_SteamVRFunctionLibrary_h_30_GENERATED_BODY_LEGACY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	Engine_Plugins_Runtime_Steam_SteamVR_Source_SteamVR_Classes_SteamVRFunctionLibrary_h_30_PRIVATE_PROPERTY_OFFSET \
	Engine_Plugins_Runtime_Steam_SteamVR_Source_SteamVR_Classes_SteamVRFunctionLibrary_h_30_RPC_WRAPPERS \
	Engine_Plugins_Runtime_Steam_SteamVR_Source_SteamVR_Classes_SteamVRFunctionLibrary_h_30_INCLASS \
	Engine_Plugins_Runtime_Steam_SteamVR_Source_SteamVR_Classes_SteamVRFunctionLibrary_h_30_STANDARD_CONSTRUCTORS \
public: \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#define Engine_Plugins_Runtime_Steam_SteamVR_Source_SteamVR_Classes_SteamVRFunctionLibrary_h_30_GENERATED_BODY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	Engine_Plugins_Runtime_Steam_SteamVR_Source_SteamVR_Classes_SteamVRFunctionLibrary_h_30_PRIVATE_PROPERTY_OFFSET \
	Engine_Plugins_Runtime_Steam_SteamVR_Source_SteamVR_Classes_SteamVRFunctionLibrary_h_30_RPC_WRAPPERS_NO_PURE_DECLS \
	Engine_Plugins_Runtime_Steam_SteamVR_Source_SteamVR_Classes_SteamVRFunctionLibrary_h_30_INCLASS_NO_PURE_DECLS \
	Engine_Plugins_Runtime_Steam_SteamVR_Source_SteamVR_Classes_SteamVRFunctionLibrary_h_30_ENHANCED_CONSTRUCTORS \
static_assert(false, "Unknown access specifier for GENERATED_BODY() macro in class SteamVRFunctionLibrary."); \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#undef CURRENT_FILE_ID
#define CURRENT_FILE_ID Engine_Plugins_Runtime_Steam_SteamVR_Source_SteamVR_Classes_SteamVRFunctionLibrary_h


#define FOREACH_ENUM_ESTEAMVRTRACKEDDEVICETYPE(op) \
	op(ESteamVRTrackedDeviceType::Controller) \
	op(ESteamVRTrackedDeviceType::TrackingReference) \
	op(ESteamVRTrackedDeviceType::Other) \
	op(ESteamVRTrackedDeviceType::Invalid) 
PRAGMA_ENABLE_DEPRECATION_WARNINGS
