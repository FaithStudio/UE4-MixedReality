// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/SteamVRPrivatePCH.h"
#include "GeneratedCppIncludes.h"
#include "SteamVR.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1SteamVR() {}
	void USteamVRChaperoneComponent::StaticRegisterNativesUSteamVRChaperoneComponent()
	{
		FNativeFunctionRegistrar::RegisterFunction(USteamVRChaperoneComponent::StaticClass(), "GetBounds",(Native)&USteamVRChaperoneComponent::execGetBounds);
	}
	IMPLEMENT_CLASS(USteamVRChaperoneComponent, 1922202999);
static class UEnum* ESteamVRTrackedDeviceType_StaticEnum()
{
	extern STEAMVR_API class UPackage* Z_Construct_UPackage__Script_SteamVR();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern STEAMVR_API class UEnum* Z_Construct_UEnum_SteamVR_ESteamVRTrackedDeviceType();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SteamVR_ESteamVRTrackedDeviceType, Z_Construct_UPackage__Script_SteamVR(), TEXT("ESteamVRTrackedDeviceType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ESteamVRTrackedDeviceType(ESteamVRTrackedDeviceType_StaticEnum, TEXT("/Script/SteamVR"), TEXT("ESteamVRTrackedDeviceType"), false, nullptr, nullptr);
	void USteamVRFunctionLibrary::StaticRegisterNativesUSteamVRFunctionLibrary()
	{
		FNativeFunctionRegistrar::RegisterFunction(USteamVRFunctionLibrary::StaticClass(), "GetHandPositionAndOrientation",(Native)&USteamVRFunctionLibrary::execGetHandPositionAndOrientation);
		FNativeFunctionRegistrar::RegisterFunction(USteamVRFunctionLibrary::StaticClass(), "GetTrackedDevicePositionAndOrientation",(Native)&USteamVRFunctionLibrary::execGetTrackedDevicePositionAndOrientation);
		FNativeFunctionRegistrar::RegisterFunction(USteamVRFunctionLibrary::StaticClass(), "GetValidTrackedDeviceIds",(Native)&USteamVRFunctionLibrary::execGetValidTrackedDeviceIds);
		FNativeFunctionRegistrar::RegisterFunction(USteamVRFunctionLibrary::StaticClass(), "RemoveCaptureRenderTarget",(Native)&USteamVRFunctionLibrary::execRemoveCaptureRenderTarget);
		FNativeFunctionRegistrar::RegisterFunction(USteamVRFunctionLibrary::StaticClass(), "SetCaptureRenderTarget",(Native)&USteamVRFunctionLibrary::execSetCaptureRenderTarget);
	}
	IMPLEMENT_CLASS(USteamVRFunctionLibrary, 2329737711);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	ENGINE_API class UClass* Z_Construct_UClass_UActorComponent();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRotator();
	INPUTCORE_API class UEnum* Z_Construct_UEnum_InputCore_EControllerHand();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTarget2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();

	STEAMVR_API class UFunction* Z_Construct_UDelegateFunction_USteamVRChaperoneComponent_SteamVRChaperoneEvent__DelegateSignature();
	STEAMVR_API class UFunction* Z_Construct_UFunction_USteamVRChaperoneComponent_GetBounds();
	STEAMVR_API class UClass* Z_Construct_UClass_USteamVRChaperoneComponent_NoRegister();
	STEAMVR_API class UClass* Z_Construct_UClass_USteamVRChaperoneComponent();
	STEAMVR_API class UEnum* Z_Construct_UEnum_SteamVR_ESteamVRTrackedDeviceType();
	STEAMVR_API class UFunction* Z_Construct_UFunction_USteamVRFunctionLibrary_GetHandPositionAndOrientation();
	STEAMVR_API class UFunction* Z_Construct_UFunction_USteamVRFunctionLibrary_GetTrackedDevicePositionAndOrientation();
	STEAMVR_API class UFunction* Z_Construct_UFunction_USteamVRFunctionLibrary_GetValidTrackedDeviceIds();
	STEAMVR_API class UFunction* Z_Construct_UFunction_USteamVRFunctionLibrary_RemoveCaptureRenderTarget();
	STEAMVR_API class UFunction* Z_Construct_UFunction_USteamVRFunctionLibrary_SetCaptureRenderTarget();
	STEAMVR_API class UClass* Z_Construct_UClass_USteamVRFunctionLibrary_NoRegister();
	STEAMVR_API class UClass* Z_Construct_UClass_USteamVRFunctionLibrary();
	STEAMVR_API class UPackage* Z_Construct_UPackage__Script_SteamVR();
	UFunction* Z_Construct_UDelegateFunction_USteamVRChaperoneComponent_SteamVRChaperoneEvent__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UClass_USteamVRChaperoneComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SteamVRChaperoneEvent__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/SteamVRChaperoneComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USteamVRChaperoneComponent_GetBounds()
	{
		struct SteamVRChaperoneComponent_eventGetBounds_Parms
		{
			TArray<FVector> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USteamVRChaperoneComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetBounds"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(SteamVRChaperoneComponent_eventGetBounds_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ReturnValue, SteamVRChaperoneComponent_eventGetBounds_Parms), 0x0010000000000580);
			UProperty* NewProp_ReturnValue_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReturnValue, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("SteamVR"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/SteamVRChaperoneComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the bounds from the Chaperone, in Unreal-scale HMD-space coordinates, centered around the HMD's calibration origin (0,0,0).  Each set of four bounds will form a quad to define a set of bounds"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_USteamVRChaperoneComponent_NoRegister()
	{
		return USteamVRChaperoneComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_USteamVRChaperoneComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UActorComponent();
			Z_Construct_UPackage__Script_SteamVR();
			OuterClass = USteamVRChaperoneComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20A80080;

				OuterClass->LinkChild(Z_Construct_UFunction_USteamVRChaperoneComponent_GetBounds());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_USteamVRChaperoneComponent_SteamVRChaperoneEvent__DelegateSignature());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnReturnToBounds = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnReturnToBounds"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnReturnToBounds, USteamVRChaperoneComponent), 0x0010000010080000, Z_Construct_UDelegateFunction_USteamVRChaperoneComponent_SteamVRChaperoneEvent__DelegateSignature());
				UProperty* NewProp_OnLeaveBounds = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnLeaveBounds"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnLeaveBounds, USteamVRChaperoneComponent), 0x0010000010080000, Z_Construct_UDelegateFunction_USteamVRChaperoneComponent_SteamVRChaperoneEvent__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USteamVRChaperoneComponent_GetBounds(), "GetBounds"); // 424241662
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UDelegateFunction_USteamVRChaperoneComponent_SteamVRChaperoneEvent__DelegateSignature(), "SteamVRChaperoneEvent__DelegateSignature"); // 506400147
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("SteamVR"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("SteamVRChaperoneComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/SteamVRChaperoneComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("SteamVR Extensions Function Library"));
				MetaData->SetValue(NewProp_OnReturnToBounds, TEXT("Category"), TEXT("SteamVR"));
				MetaData->SetValue(NewProp_OnReturnToBounds, TEXT("ModuleRelativePath"), TEXT("Classes/SteamVRChaperoneComponent.h"));
				MetaData->SetValue(NewProp_OnLeaveBounds, TEXT("Category"), TEXT("SteamVR"));
				MetaData->SetValue(NewProp_OnLeaveBounds, TEXT("ModuleRelativePath"), TEXT("Classes/SteamVRChaperoneComponent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USteamVRChaperoneComponent(Z_Construct_UClass_USteamVRChaperoneComponent, &USteamVRChaperoneComponent::StaticClass, TEXT("USteamVRChaperoneComponent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USteamVRChaperoneComponent);
	UEnum* Z_Construct_UEnum_SteamVR_ESteamVRTrackedDeviceType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_SteamVR();
		extern uint32 Get_Z_Construct_UEnum_SteamVR_ESteamVRTrackedDeviceType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ESteamVRTrackedDeviceType"), 0, Get_Z_Construct_UEnum_SteamVR_ESteamVRTrackedDeviceType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESteamVRTrackedDeviceType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESteamVRTrackedDeviceType::Controller")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESteamVRTrackedDeviceType::TrackingReference")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESteamVRTrackedDeviceType::Other")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESteamVRTrackedDeviceType::Invalid")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESteamVRTrackedDeviceType::ESteamVRTrackedDeviceType_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("ESteamVRTrackedDeviceType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("Controller.ToolTip"), TEXT("Represents a Steam VR Controller"));
			MetaData->SetValue(ReturnEnum, TEXT("Invalid.ToolTip"), TEXT("DeviceId is invalid"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/SteamVRFunctionLibrary.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Other.ToolTip"), TEXT("Misc. device types, for future expansion"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Defines the class of tracked devices in SteamVR"));
			MetaData->SetValue(ReturnEnum, TEXT("TrackingReference.ToolTip"), TEXT("Represents a static tracking reference device, such as a Lighthouse or tracking camera"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SteamVR_ESteamVRTrackedDeviceType_CRC() { return 1013842913U; }
	UFunction* Z_Construct_UFunction_USteamVRFunctionLibrary_GetHandPositionAndOrientation()
	{
		struct SteamVRFunctionLibrary_eventGetHandPositionAndOrientation_Parms
		{
			int32 ControllerIndex;
			EControllerHand Hand;
			FVector OutPosition;
			FRotator OutOrientation;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USteamVRFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetHandPositionAndOrientation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SteamVRFunctionLibrary_eventGetHandPositionAndOrientation_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SteamVRFunctionLibrary_eventGetHandPositionAndOrientation_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SteamVRFunctionLibrary_eventGetHandPositionAndOrientation_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SteamVRFunctionLibrary_eventGetHandPositionAndOrientation_Parms), sizeof(bool), true);
			UProperty* NewProp_OutOrientation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutOrientation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OutOrientation, SteamVRFunctionLibrary_eventGetHandPositionAndOrientation_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_OutPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OutPosition, SteamVRFunctionLibrary_eventGetHandPositionAndOrientation_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Hand = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Hand"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Hand, SteamVRFunctionLibrary_eventGetHandPositionAndOrientation_Parms), 0x0010000000000080, Z_Construct_UEnum_InputCore_EControllerHand());
			UProperty* NewProp_ControllerIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ControllerIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ControllerIndex, SteamVRFunctionLibrary_eventGetHandPositionAndOrientation_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("SteamVR"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/SteamVRFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Given a controller index and a hand, returns the position and orientation of the controller\n\n@param       ControllerIndex Index of the controller to get the tracked device ID for\n@param       Hand                    Which hand's controller to get the position and orientation for\n@param       OutPosition             (out) Current position of the device\n@param       OutRotation             (out) Current rotation of the device\n@return      True if the specified controller index has a valid tracked device ID"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USteamVRFunctionLibrary_GetTrackedDevicePositionAndOrientation()
	{
		struct SteamVRFunctionLibrary_eventGetTrackedDevicePositionAndOrientation_Parms
		{
			int32 DeviceId;
			FVector OutPosition;
			FRotator OutOrientation;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USteamVRFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTrackedDevicePositionAndOrientation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SteamVRFunctionLibrary_eventGetTrackedDevicePositionAndOrientation_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SteamVRFunctionLibrary_eventGetTrackedDevicePositionAndOrientation_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SteamVRFunctionLibrary_eventGetTrackedDevicePositionAndOrientation_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SteamVRFunctionLibrary_eventGetTrackedDevicePositionAndOrientation_Parms), sizeof(bool), true);
			UProperty* NewProp_OutOrientation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutOrientation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OutOrientation, SteamVRFunctionLibrary_eventGetTrackedDevicePositionAndOrientation_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_OutPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OutPosition, SteamVRFunctionLibrary_eventGetTrackedDevicePositionAndOrientation_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_DeviceId = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeviceId"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(DeviceId, SteamVRFunctionLibrary_eventGetTrackedDevicePositionAndOrientation_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("SteamVR"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/SteamVRFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the orientation and position (in device space) of the device with the specified ID\n\n@param       DeviceId                Id of the device to get tracking info for\n@param       OutPosition             (out) Current position of the device\n@param       OutOrientation  (out) Current orientation of the device\n@return      True if the specified device id had a valid tracking pose this frame, false otherwise"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USteamVRFunctionLibrary_GetValidTrackedDeviceIds()
	{
		struct SteamVRFunctionLibrary_eventGetValidTrackedDeviceIds_Parms
		{
			ESteamVRTrackedDeviceType DeviceType;
			TArray<int32> OutTrackedDeviceIds;
		};
		UObject* Outer=Z_Construct_UClass_USteamVRFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetValidTrackedDeviceIds"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SteamVRFunctionLibrary_eventGetValidTrackedDeviceIds_Parms));
			UProperty* NewProp_OutTrackedDeviceIds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutTrackedDeviceIds"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(OutTrackedDeviceIds, SteamVRFunctionLibrary_eventGetValidTrackedDeviceIds_Parms), 0x0010000000000180);
			UProperty* NewProp_OutTrackedDeviceIds_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutTrackedDeviceIds, TEXT("OutTrackedDeviceIds"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_DeviceType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeviceType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(DeviceType, SteamVRFunctionLibrary_eventGetValidTrackedDeviceIds_Parms), 0x0010000000000080, Z_Construct_UEnum_SteamVR_ESteamVRTrackedDeviceType());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("SteamVR"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/SteamVRFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns an array of the currently tracked device IDs\n\n@param       DeviceType      Which class of device (e.g. controller, tracking devices) to get Device Ids for\n@param       OutTrackedDeviceIds     (out) Array containing the ID of each device that's currently tracked"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USteamVRFunctionLibrary_RemoveCaptureRenderTarget()
	{
		struct SteamVRFunctionLibrary_eventRemoveCaptureRenderTarget_Parms
		{
			UTextureRenderTarget2D* NewTexture;
			UTextureRenderTarget2D* NewTexture2;
		};
		UObject* Outer=Z_Construct_UClass_USteamVRFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RemoveCaptureRenderTarget"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(SteamVRFunctionLibrary_eventRemoveCaptureRenderTarget_Parms));
			UProperty* NewProp_NewTexture2 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewTexture2"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NewTexture2, SteamVRFunctionLibrary_eventRemoveCaptureRenderTarget_Parms), 0x0010000000000080, Z_Construct_UClass_UTextureRenderTarget2D_NoRegister());
			UProperty* NewProp_NewTexture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewTexture"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NewTexture, SteamVRFunctionLibrary_eventRemoveCaptureRenderTarget_Parms), 0x0010000000000080, Z_Construct_UClass_UTextureRenderTarget2D_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("SteamVR"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/SteamVRFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USteamVRFunctionLibrary_SetCaptureRenderTarget()
	{
		struct SteamVRFunctionLibrary_eventSetCaptureRenderTarget_Parms
		{
			UTextureRenderTarget2D* NewTexture;
			UTextureRenderTarget2D* NewTexture2;
		};
		UObject* Outer=Z_Construct_UClass_USteamVRFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetCaptureRenderTarget"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(SteamVRFunctionLibrary_eventSetCaptureRenderTarget_Parms));
			UProperty* NewProp_NewTexture2 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewTexture2"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NewTexture2, SteamVRFunctionLibrary_eventSetCaptureRenderTarget_Parms), 0x0010000000000080, Z_Construct_UClass_UTextureRenderTarget2D_NoRegister());
			UProperty* NewProp_NewTexture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewTexture"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NewTexture, SteamVRFunctionLibrary_eventSetCaptureRenderTarget_Parms), 0x0010000000000080, Z_Construct_UClass_UTextureRenderTarget2D_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("SteamVR"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/SteamVRFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("MIXED-REALITY"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_USteamVRFunctionLibrary_NoRegister()
	{
		return USteamVRFunctionLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_USteamVRFunctionLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage__Script_SteamVR();
			OuterClass = USteamVRFunctionLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_USteamVRFunctionLibrary_GetHandPositionAndOrientation());
				OuterClass->LinkChild(Z_Construct_UFunction_USteamVRFunctionLibrary_GetTrackedDevicePositionAndOrientation());
				OuterClass->LinkChild(Z_Construct_UFunction_USteamVRFunctionLibrary_GetValidTrackedDeviceIds());
				OuterClass->LinkChild(Z_Construct_UFunction_USteamVRFunctionLibrary_RemoveCaptureRenderTarget());
				OuterClass->LinkChild(Z_Construct_UFunction_USteamVRFunctionLibrary_SetCaptureRenderTarget());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USteamVRFunctionLibrary_GetHandPositionAndOrientation(), "GetHandPositionAndOrientation"); // 482116528
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USteamVRFunctionLibrary_GetTrackedDevicePositionAndOrientation(), "GetTrackedDevicePositionAndOrientation"); // 779475427
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USteamVRFunctionLibrary_GetValidTrackedDeviceIds(), "GetValidTrackedDeviceIds"); // 740715891
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USteamVRFunctionLibrary_RemoveCaptureRenderTarget(), "RemoveCaptureRenderTarget"); // 3858118408
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USteamVRFunctionLibrary_SetCaptureRenderTarget(), "SetCaptureRenderTarget"); // 1791393271
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("SteamVRFunctionLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/SteamVRFunctionLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("SteamVR Extensions Function Library"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USteamVRFunctionLibrary(Z_Construct_UClass_USteamVRFunctionLibrary, &USteamVRFunctionLibrary::StaticClass, TEXT("USteamVRFunctionLibrary"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USteamVRFunctionLibrary);
	UPackage* Z_Construct_UPackage__Script_SteamVR()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/SteamVR")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0xF4598332;
			Guid.B = 0xD7C34603;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

			Z_Construct_UDelegateFunction_USteamVRChaperoneComponent_SteamVRChaperoneEvent__DelegateSignature();
		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
